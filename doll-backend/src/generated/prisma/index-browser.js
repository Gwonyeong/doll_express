
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.GameBusinessScalarFieldEnum = {
  id: 'id',
  번호: '번호',
  개방서비스명: '개방서비스명',
  개방서비스아이디: '개방서비스아이디',
  개방자치단체코드: '개방자치단체코드',
  관리번호: '관리번호',
  인허가일자: '인허가일자',
  인허가취소일자: '인허가취소일자',
  영업상태구분코드: '영업상태구분코드',
  영업상태명: '영업상태명',
  상세영업상태코드: '상세영업상태코드',
  상세영업상태명: '상세영업상태명',
  폐업일자: '폐업일자',
  휴업시작일자: '휴업시작일자',
  휴업종료일자: '휴업종료일자',
  재개업일자: '재개업일자',
  소재지전화: '소재지전화',
  소재지면적: '소재지면적',
  소재지우편번호: '소재지우편번호',
  소재지전체주소: '소재지전체주소',
  도로명전체주소: '도로명전체주소',
  도로명우편번호: '도로명우편번호',
  사업장명: '사업장명',
  최종수정시점: '최종수정시점',
  데이터갱신구분: '데이터갱신구분',
  데이터갱신일자: '데이터갱신일자',
  업태구분명: '업태구분명',
  좌표정보x: '좌표정보x',
  좌표정보y: '좌표정보y',
  문화체육업종명: '문화체육업종명',
  문화사업자구분명: '문화사업자구분명',
  총층수: '총층수',
  주변환경명: '주변환경명',
  제작취급품목내용: '제작취급품목내용',
  시설면적: '시설면적',
  지상층수: '지상층수',
  지하층수: '지하층수',
  건물용도명: '건물용도명',
  통로너비: '통로너비',
  조명시설조도: '조명시설조도',
  노래방실수: '노래방실수',
  청소년실수: '청소년실수',
  비상계단여부: '비상계단여부',
  비상구여부: '비상구여부',
  자동환기여부: '자동환기여부',
  청소년실여부: '청소년실여부',
  특수조명여부: '특수조명여부',
  방음시설여부: '방음시설여부',
  비디오재생기명: '비디오재생기명',
  조명시설유무: '조명시설유무',
  음향시설여부: '음향시설여부',
  편의시설여부: '편의시설여부',
  소방시설여부: '소방시설여부',
  총게임기수: '총게임기수',
  기존게임업외업종명: '기존게임업외업종명',
  제공게임물명: '제공게임물명',
  공연장형태구분명: '공연장형태구분명',
  품목명: '품목명',
  최초등록시점: '최초등록시점',
  지역구분명: '지역구분명',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  tossId: 'tossId',
  nickname: 'nickname',
  email: 'email',
  avatar: 'avatar',
  name: 'name',
  phone: 'phone',
  birthday: 'birthday',
  gender: 'gender',
  ci: 'ci',
  di: 'di',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  rating: 'rating',
  content: 'content',
  images: 'images',
  tags: 'tags',
  userId: 'userId',
  userName: 'userName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  GameBusiness: 'GameBusiness',
  User: 'User',
  Review: 'Review'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
